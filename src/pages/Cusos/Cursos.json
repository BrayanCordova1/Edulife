[
  {
    "id": 1,
    "name": "Aprende HTML Basico",
    "description": "Domina el lenguaje de marcado para construir sitios web",
    "image": "/curso_html.png",
    "datasCursoId": {
      "Modulos:": {
        "Modulo1": {
          "titulo": "Introducción al HTML5",
          "tema1": {
            "titulo": "HTML5: La estructura de la web moderna",
            "header": "¡Descubre la potencia de HTML5 y aprende a crear páginas web modernas con esta tecnología fundamental para el desarrollo web! Exploraremos su estructura y su importancia en la creación de sitios web accesibles y atractivos visualmente.",
            "video": "https://www.youtube.com/embed/kIMgLOFAExg",
            "text1": "HTML5 es la última versión del lenguaje de marcado estándar utilizado para crear y estructurar el contenido de las páginas web. HTML significa Hypertext Markup Language (Lenguaje de Marcado de Hipertexto) y es fundamental para la construcción de sitios web en la actualidad. Con HTML5, se han introducido nuevas características y elementos que permiten una mejor representación de contenido multimedia, gráficos y aplicaciones interactivas directamente en el navegador web, sin necesidad de plugins externos.",
            "sombreado1": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Título de la página</title>\n  </head>\n  <body>\n    <h1>Encabezado principal</h1>\n    <p>Este es un párrafo de ejemplo.</p>\n  </body>\n</html>",
            "text2": "Una de las características más destacadas de HTML5 es su capacidad para admitir una amplia variedad de dispositivos, como computadoras de escritorio, tablets y smartphones. Esto significa que puedes desarrollar una única página web que se adapte automáticamente a diferentes tamaños de pantalla y resoluciones. Además, HTML5 también ofrece etiquetas semánticas que permiten describir de manera más precisa la estructura y el significado del contenido, lo que facilita la indexación por parte de los motores de búsqueda y mejora la accesibilidad web.",
            "text3": "Otra ventaja importante de HTML5 es su compatibilidad con tecnologías complementarias como CSS3 (Cascading Style Sheets) y JavaScript, lo que permite crear páginas web dinámicas y atractivas. Con CSS3, puedes aplicar estilos y diseños sofisticados a tus elementos HTML, mientras que JavaScript te brinda la capacidad de agregar interactividad y funcionalidad avanzada a tu página. Estas tres tecnologías (HTML5, CSS3 y JavaScript) son fundamentales en el desarrollo web moderno y se complementan entre sí para brindar una experiencia de usuario enriquecedora.",
            "sombreado3": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Título de la página</title>\n    <style>\n      h1 {\n        color: blue;\n      }\n      p {\n        font-size: 16px;\n      }\n    </style>\n    <script>\n      function mostrarMensaje() {\n        alert('¡Hola, mundo!');\n      }\n    </script>\n  </head>\n  <body>\n    <h1 onclick=\"mostrarMensaje()\">Haz clic aquí</h1>\n    <p>Este es un párrafo con estilo personalizado.</p>\n  </body>\n</html>"
          },
          "tema2": {
            "titulo": "Sintaxis de HTML",
            "header": "La sintaxis de HTML es fundamental para crear páginas web. HTML, que significa HyperText Markup Language (Lenguaje de Marcado de Hipertexto), es el lenguaje estándar utilizado para estructurar y presentar el contenido en la web. En esta lección, aprenderemos las etiquetas básicas de HTML y algunos atributos esenciales para comenzar a construir páginas web.",
            "video": "https://www.youtube.com/embed/HBSB4WhBYYU",
            "text1": "HTML es un lenguaje basado en etiquetas. Cada etiqueta se define mediante corchetes angulares (< x >) y se utiliza para envolver diferentes partes del contenido. La etiqueta principal es <html>, que encierra todo el contenido de la página. Dentro de <html>, encontramos dos secciones principales: <head> y <body>.",
            "sombreado1": "<html>\n  <head>\n    <!-- Aquí va la información del encabezado -->\n  </head>\n  <body>\n    <!-- Aquí va el contenido visible de la página -->\n  </body>\n</html>",
            "text2": "Dentro de <head>, se encuentra la información del encabezado, como el título de la página que se muestra en la pestaña del navegador. Para definir el título, utilizamos la etiqueta <title>. Por ejemplo:",
            "sombreado2": "<head>\n  <title>Título de la página</title>\n</head>",
            "text3": "Dentro de <body>, se coloca todo el contenido visible de la página. Aquí es donde utilizamos diferentes etiquetas para estructurar y presentar el contenido. Algunas etiquetas básicas incluyen:",
            "sombreado3": "<body>\n  <h1>Título principal</h1>\n  <p>Este es un párrafo de texto.</p>\n</body>",
            "text4": "La etiqueta <h1> define un encabezado de nivel 1, existe hasta <h6>, que define diferentes tamaños para textos, que suele ser el título principal de la página. Los párrafos se crean con la etiqueta <p>. Los enlaces se crean con la etiqueta <a> y el atributo href se utiliza para especificar la URL de destino cuando des click al 'Enlace'.",
            "sombreado4": "<h1>Título principal</h1>\n<h2>Título principal</h2>\n<h3>Título principal</h3>\n<h4>Título principal</h4>\n<h5>Título principal</h5>\n<h6>Título principal</h6>\n<p>Este es un párrafo de texto.</p>\n<a href=\"https://www.ejemplo.com\">Enlace</a>",
            "text5": "Además de las etiquetas básicas, HTML tiene una amplia variedad de etiquetas y atributos para diferentes propósitos, como insertar imágenes, crear listas, formularios y mucho más. A medida que avancemos en el aprendizaje de HTML, iremos explorando estas etiquetas y atributos en detalle.",
            "sombreado5": "<img src=\"imagen.jpg\" alt=\"Descripción de la imagen\">\n<ul>\n  <li>Elemento de lista 1</li>\n  <li>Elemento de lista 2</li>\n</ul>\n<form>\n  <!-- Elementos del formulario aquí -->\n</form>",
            "text6": "Recuerda que la sintaxis de HTML debe seguir reglas específicas para que funcione correctamente. Cada etiqueta debe abrirse y cerrarse adecuadamente. Algunas etiquetas, como <br> y <img>, no requieren un cierre explícito.",
            "sombreado6": "<p>Este es un párrafo.<br>\nEste es otro párrafo.</p>\n<img src=\"imagen.jpg\" alt=\"Descripción de la imagen\">",
            "text7": "Con este conocimiento básico sobre la sintaxis de HTML, estás listo para comenzar a crear tus propias páginas web. ¡Experimenta y diviértete construyendo!"
          }
        },
        "Modulo2": {
          "titulo": "Imágenes y multimedia",
          "tema1": {
            "titulo": "Inserción de imágenes (atributos src, alt, width, height)",
            "header": "En este tema aprenderemos cómo insertar imágenes en una página web utilizando HTML5. Las imágenes son elementos visuales clave que ayudan a mejorar la apariencia y la experiencia del usuario en un sitio web. Veremos cómo utilizar los atributos src, alt, width y height para especificar la ubicación de la imagen, proporcionar texto alternativo y controlar el tamaño de la imagen.",
            "video": "https://www.youtube.com/embed/tEilT0t86oY",
            "text1": "Cuando insertamos una imagen en una página HTML, utilizamos la etiqueta <img>. Esta etiqueta es una etiqueta de autocierre, lo que significa que no tiene una etiqueta de cierre correspondiente. El atributo más importante que debemos especificar es el atributo src, que indica la ruta de la imagen en el servidor o en la ubicación local de nuestro archivo HTML. Por ejemplo:",
            "sombreado1": "<img src=\"ruta_de_la_imagen.jpg\">",
            "text2": "El atributo alt es utilizado para proporcionar un texto alternativo a la imagen. Este texto se mostrará si la imagen no se puede cargar correctamente o si el usuario utiliza un lector de pantalla. Es una buena práctica incluir siempre el atributo alt y describir brevemente el contenido de la imagen. Por ejemplo:",
            "sombreado2": "<img src=\"ruta_de_la_imagen.jpg\" alt=\"Descripción de la imagen\">",
            "text3": "Además de los atributos src y alt, podemos utilizar los atributos width y height para especificar el tamaño de la imagen en píxeles. Estos atributos permiten controlar el espacio que se reserva para la imagen en la página, incluso antes de que se cargue la imagen. Es importante tener en cuenta que si especificamos solo uno de los atributos (width o height), el otro se ajustará automáticamente para mantener la proporción original de la imagen. Por ejemplo:",
            "sombreado3": "<img src=\"ruta_de_la_imagen.jpg\" alt=\"Descripción de la imagen\" width=\"400\" height=\"300\">",
            "text4": "También es posible especificar el tamaño de la imagen utilizando unidades relativas, como porcentaje o em. Esto permite que la imagen se ajuste de manera más flexible a diferentes tamaños de pantalla. Sin embargo, es importante tener en cuenta que el tamaño de la imagen en unidades relativas se basará en el tamaño del contenedor padre. Por ejemplo:",
            "sombreado4": "<img src=\"ruta_de_la_imagen.jpg\" alt=\"Descripción de la imagen\" width=\"50%\" height=\"auto\">",
            "text5": "Recuerda que es recomendable optimizar las imágenes antes de utilizarlas en una página web para reducir su tamaño de archivo y mejorar el tiempo de carga de la página. Además, asegúrate de utilizar imágenes con derechos de autor adecuados o imágenes que hayas creado tú mismo.",
            "sombreado5": ""
          },
          "tema2": {
            "titulo": "Audio y video en HTML5 (etiquetas <audio> y <video>)",
            "header": "En este tema, exploraremos cómo incorporar audio y video en una página web utilizando las etiquetas <audio> y <video> de HTML5. Estas etiquetas permiten la reproducción de contenido multimedia directamente en el navegador, sin necesidad de complementos externos como Flash. Aprenderemos sobre los atributos clave de estas etiquetas y algunos consejos útiles para trabajar con audio y video en HTML5.",

            "text1": "La etiqueta <audio> se utiliza para insertar audio en una página web. Puedes especificar la fuente de audio utilizando el atributo 'src', que debe contener la URL del archivo de audio. También puedes proporcionar alternativas en caso de que el navegador no pueda reproducir el archivo de audio. Para ello, se pueden agregar etiquetas <source> dentro de la etiqueta <audio>, cada una con un atributo 'src' y 'type' que especifica el formato del archivo de audio. Por ejemplo:",

            "sombreado1": "<audio controls>\n <source src='audio.mp3' type='audio/mpeg'>\n <source src='audio.ogg' type='audio/ogg'>\n Tu navegador no soporta el elemento de audio.\n</audio>",

            "text2": "La etiqueta <video>, por otro lado, se utiliza para insertar videos en una página web. Al igual que con la etiqueta <audio>, puedes especificar la fuente del video utilizando el atributo 'src'. Además, puedes proporcionar diferentes formatos de video utilizando etiquetas <source>. Esto es útil para garantizar la compatibilidad con diferentes navegadores y dispositivos. Aquí tienes un ejemplo:",

            "sombreado2": "<video controls>\n <source src='video.mp4' type='video/mp4'>\n <source src='video.webm' type='video/webm'>\n Tu navegador no soporta el elemento de video.\n</video>",

            "text3": "Los atributos 'controls' en las etiquetas <audio> y <video> agregan controles de reproducción al reproductor multimedia, como botones de reproducción, pausa y volumen. Estos controles se renderizarán automáticamente en la página. Además, puedes agregar el atributo 'autoplay' para que el audio o video se reproduzca automáticamente al cargar la página. Sin embargo, ten en cuenta que los navegadores pueden restringir la reproducción automática debido a la política de reproducción automática.",

            "text4": "Otro atributo útil es 'poster', que te permite especificar una imagen de portada para el video. Esta imagen se mostrará antes de que el video se reproduzca y proporciona una vista previa visual para el usuario. Por ejemplo:",

            "sombreado3": "<video controls poster='poster.jpg'>\n <source src='video.mp4' type='video/mp4'>\n Tu navegador no soporta el elemento de video.\n</video>",

            "text5": "Además de los atributos mencionados, hay muchos otros que puedes utilizar para personalizar la reproducción de audio y video en HTML5, como 'loop' para repetir la reproducción, 'preload' para controlar la carga previa del contenido multimedia y 'muted' para silenciar el audio. Asegúrate de consultar la documentación oficial de HTML5 para obtener más detalles sobre estos atributos y cómo utilizarlos.",

            "sombreado4": "<audio controls loop>\n <source src='audio.mp3' type='audio/mpeg'>\n Tu navegador no soporta el elemento de audio.\n</audio>",

            "text6": "Recuerda que al utilizar contenido multimedia en tus páginas web, es importante considerar la accesibilidad. Asegúrate de proporcionar alternativas de texto para usuarios que no pueden ver o escuchar el contenido multimedia, utilizando la etiqueta <track> para subtítulos y descripciones de audio. También debes tener en cuenta el tamaño y el formato de tus archivos multimedia para optimizar la carga de la página y mejorar la experiencia del usuario.",

            "sombreado5": "<video controls>\n <source src='video.mp4' type='video/mp4'>\n <track src='subtitles.vtt' kind='subtitles' srclang='en' label='English'>\n Tu navegador no soporta el elemento de video.\n</video>"
          }
        }
      }
    }
  },
  {
    "id": 2,
    "name": "Domina CSS Basico",
    "description": "Aprende a dar estilo y diseño a tus sitios web",
    "image": "/curso_css.png",
    "datasCursoId": {
      "Modulos:": {
        "Modulo1": {
          "titulo": "Introducción a CSS3",
          "tema1": {
            "titulo": "CSS3: Los estilos de la vida",
            "header": "CSS3: El lenguaje de estilo que transforma la apariencia de los sitios web. Aprende a dar vida a tus páginas web con este curso introductorio donde exploraremos las poderosas capacidades de CSS3 y cómo puedes utilizarlas para crear diseños atractivos y modernos.",
            "video": "https://www.youtube.com/embed/PkMQ6iRDuhE",
            "text1": "¡Bienvenidos al mundo de CSS3! En este curso, exploraremos uno de los pilares fundamentales del desarrollo web: el lenguaje de hojas de estilo en cascada. CSS3, la versión más reciente de CSS (Cascading Style Sheets), ofrece una amplia gama de herramientas y características para diseñar y dar estilo a tus páginas web. Con CSS3, puedes personalizar colores, fuentes, tamaños, márgenes, bordes y muchos otros aspectos visuales de tus sitios. Además, gracias a sus capacidades de animación y transformación, CSS3 puede llevar tus diseños a un nivel completamente nuevo.",
            "text2": "Para comprender la importancia de CSS3, es crucial conocer un poco de su historia. CSS surgió como una respuesta a la necesidad de separar la estructura y el contenido de los sitios web de su presentación visual. Antes de CSS, los estilos se definían directamente en el código HTML, lo cual generaba páginas pesadas y difíciles de mantener. Con la introducción de CSS en 1996, los desarrolladores pudieron separar la apariencia visual de la estructura, lo que permitió una mayor flexibilidad y eficiencia en el diseño web.",
            "sombreado1": "body {\n font-family: Arial, sans-serif;\n background-color: #f2f2f2;\n}\n\n.container {\n width: 960px;\n margin: 0 auto;\n padding: 20px;\n}\n\nh1 {\n color: #333333;\n font-size: 24px;\n margin-bottom: 10px;\n}\n\np {\n color: #666666;\n font-size: 16px;\n line-height: 1.5;\n}"
          },
          "tema2": {
            "titulo": "Selectores CSS",
            "header": "Los selectores CSS son una parte fundamental para dar estilo a los elementos HTML. Con los selectores CSS, puedes seleccionar y aplicar estilos específicos a uno o varios elementos en tu página web. En este tema, aprenderemos sobre diferentes tipos de selectores CSS y cómo utilizarlos para personalizar tus elementos HTML.",

            "text1": "Antes de profundizar en los selectores CSS, es importante comprender la estructura básica de una regla CSS. Una regla CSS consta de un selector y un bloque de declaraciones. El selector indica qué elemento o elementos se deben estilizar, mientras que el bloque de declaraciones contiene las propiedades y los valores que definen el estilo.",

            "text2": "El selector más común es el selector de etiqueta, que selecciona todos los elementos de un tipo específico. Por ejemplo, si deseas aplicar estilos a todos los párrafos de tu página, puedes utilizar el selector de etiqueta 'p'.",

            "sombreado1": "\nHTML:\n<html>\n<head>\n<title>Document</title>\n<body>\n<p>Hola soy un parrafo</p>\n</body>\n</html>\nCSS:\np {\n color: blue;\n font-size: 16px;\n font-family: Arial, sans-serif;\n\n}",

            "text3": "Además del selector de etiqueta, existen otros selectores que te permiten seleccionar elementos más específicos. Por ejemplo, el selector de clase se utiliza para seleccionar elementos que tienen un atributo de clase específico. Para utilizar un selector de clase, se antepone un punto al nombre de la clase. Por ejemplo, si deseas estilizar todos los elementos con la clase 'destacado', puedes utilizar el selector '.destacado'.",

            "sombreado2": "\nHTML:\n<p class=\"destacado\">Hola soy un parrafo</p>\nCSS:\n.destacado {\n background-color: yellow;\n border: 1px solid black;\n}",

            "text4": "Otro tipo de selector es el selector de ID, que se utiliza para seleccionar un elemento específico con un atributo de ID único. Para utilizar un selector de ID, se antepone un símbolo de almohadilla al nombre del ID. Por ejemplo, si deseas estilizar el elemento con el ID 'encabezado', puedes utilizar el selector '#encabezado'.",

            "sombreado3": "\nHTML:\n<p id=\"encabezado\">Hola soy un parrafo</p>\nCSS:\n#encabezado {\n text-align: center;\n font-weight: bold;\n}",

            "text5": "Además de estos selectores básicos, existen otros selectores CSS más avanzados, como el selector de descendiente, el selector de atributo y el selector de pseudo-clase. Estos selectores te permiten seleccionar elementos en función de su relación con otros elementos, sus atributos o su estado.",

            "text6": "En resumen, los selectores CSS son herramientas poderosas que te permiten dar estilo a los elementos HTML de manera precisa. Al comprender y utilizar los diferentes tipos de selectores CSS, podrás personalizar completamente el aspecto de tu página web.",

            "sombreado4": "\nHTML:\n<div class=\"contenedor\">\n<p>Hola soy un parrafo</p>\n</div>\nCSS:\n/* Selector de descendiente /\n\n.contenedor p {\n color: red;\n}\nHTML:\n<a href=\"https://www.ejemplo.com\">Hola soy un parrafo</a>\nCSS:\n/ Selector de atributo /\n\na[href='https://www.ejemplo.com'] {\n text-decoration: none;\n}\n"
          }
        },
        "Modulo2": {
          "titulo": "Colores y textos",
          "tema1": {
            "titulo": "Colores de CSS",
            "header": "Los colores desempeñan un papel fundamental en el diseño web. En CSS, podemos especificar colores de diversas formas y utilizar una amplia gama de opciones para lograr el aspecto deseado. En este tema, exploraremos cómo elegir colores y utilizar la notación hexadecimal en CSS para definirlos. Aprenderemos algunos consejos útiles para trabajar con colores y cómo aplicarlos en nuestros estilos CSS.",
            "video": "https://www.youtube.com/embed/1jg5FNsAtBg",

            "text1": "La elección adecuada de colores puede afectar significativamente la apariencia y la legibilidad de un sitio web. Cuando seleccionamos colores en CSS, hay varias formas de hacerlo. Una de las más comunes es utilizar la notación hexadecimal. En esta notación, los colores se representan mediante una combinación de números y letras. Por ejemplo, el color blanco se puede representar como #FFFFFF, mientras que el negro se representa como #000000. Los dos primeros caracteres representan la intensidad del color rojo, los dos siguientes la intensidad del verde y los dos últimos la intensidad del azul. Combinando diferentes valores hexadecimales, podemos obtener una amplia variedad de colores.",

            "text2": "Es importante tener en cuenta que CSS también admite otros formatos de color, como los nombres de color predefinidos (por ejemplo, 'red' para rojo). Sin embargo, la notación hexadecimal es ampliamente utilizada debido a su flexibilidad y compatibilidad con diferentes navegadores y aplicaciones web. Además, nos permite especificar colores de forma más precisa y personalizada.",

            "sombreado1": "/* Podemos usar la notación hexadecimal en CSS */\n\n.selector {\n  color: #FF0000;\n  background-color: #00FF00;\n}\n\n/* También podemos usar nombres de color predefinidos */\n\n.selector2 {\n  color: red;\n  background-color: green;\n}",

            "sombreado2": "/* Los colores en CSS pueden ser representados usando notación hexadecimal */\n\n.selector {\n  color: #FF0000; /* Rojo */\n  background-color: #00FF00; /* Verde */\n  border-color: #0000FF; /* Azul */\n}\n\n/* También podemos usar nombres de color predefinidos */\n\n.selector2 {\n  color: red;\n  background-color: green;\n  border-color: blue;\n}"
          },
          "tema2": {
            "titulo": "Textos de CSS",
            "header": "En este tema aprenderemos sobre los textos en CSS, incluyendo los tipos de texto, tamaños de texto y cómo cambiar su estilo.",
            "video": "https://www.youtube.com/embed/JvOdqWlZq6c",
            "text1": "El texto es una parte fundamental de cualquier sitio web. En CSS, tenemos diferentes tipos de texto que podemos utilizar para dar estilo y estructura a nuestros contenidos. Uno de los elementos más básicos es el selector de texto, que nos permite aplicar estilos a todo el texto dentro de un elemento específico. Por ejemplo, podemos cambiar el color del texto, el tamaño de la fuente y el espaciado entre las letras.",
            "text2": "Además del selector de texto, también podemos utilizar selectores más específicos para aplicar estilos a partes específicas del texto. Por ejemplo, podemos utilizar el selector de clase para aplicar estilos a todos los elementos con una clase específica, o el selector de ID para aplicar estilos a un elemento con un ID único. Esto nos da mucha flexibilidad a la hora de dar estilo a nuestros textos.",
            "text3": "En cuanto a los tamaños de texto, CSS nos permite especificar el tamaño de la fuente utilizando diferentes unidades de medida, como píxeles, porcentajes o em. Podemos ajustar el tamaño del texto para que se adapte a diferentes dispositivos o para crear efectos visuales interesantes. Además del tamaño de fuente, también podemos ajustar el espaciado entre líneas y los márgenes alrededor del texto.",
            "text4": "Por último, CSS nos ofrece una amplia gama de propiedades para cambiar el estilo del texto. Podemos cambiar la fuente utilizando la propiedad `font-family`, aplicar negrita o cursiva utilizando las propiedades `font-weight` y `font-style`, y decorar el texto con subrayados o líneas a través de la propiedad `text-decoration`. Además, también podemos controlar la alineación del texto, el espaciado entre palabras y letras, y muchas otras opciones.",
            "sombreado1": "/* Cambiar el color del texto */\nselector {\n  color: #ff0000;\n}\n\n/* Cambiar el tamaño de la fuente */\nselector {\n  font-size: 16px;\n}\n\n/* Cambiar el espaciado entre letras */\nselector {\n  letter-spacing: 2px;\n}\n",
            "sombreado2": "/* Utilizar un selector de clase */\n.clase {\n  color: #00ff00;\n}\n\n/* Utilizar un selector de ID */\n#id {\n  font-weight: bold;\n}\n",
            "sombreado3": "/* Especificar el tamaño de la fuente en píxeles */\nselector {\n  font-size: 12px;\n}\n\n/* Especificar el tamaño de la fuente en porcentaje */\nselector {\n  font-size: 120%;\n}\n\n/* Especificar el tamaño de la fuente en em */\nselector {\n  font-size: 1.5em;\n}\n",
            "sombreado4": "/* Cambiar la fuente del texto */\nselector {\n  font-family: Arial, sans-serif;\n}\n\n/* Aplicar negrita */\nselector {\n  font-weight: bold;\n}\n\n/* Aplicar cursiva */\nselector {\n  font-style: italic;\n}"
          }
        }
      }
    }
  },
  {
    "id": 3,
    "name": "Conoce JavaScript Basico",
    "description": "Descubre el lenguaje de programación más popular del mundo web",
    "image": "/curso_javascript.png",
    "datasCursoId": {
      "Modulos:": {
        "Modulo1": {
          "titulo": "Introducción a JavaScript",
          "tema1": {
            "titulo": "El cerebro de las pagina web",
            "header": "JavaScript es un lenguaje de programación ampliamente utilizado en el desarrollo web. En esta lección, aprenderemos los conceptos básicos de JavaScript, cómo enlazarlo con HTML y exploraremos un poco de su historia.",
            "video": "https://www.youtube.com/embed/IIj-EkEx6Lw",
            "text1": "JavaScript es un lenguaje de programación de alto nivel que se utiliza principalmente para crear interactividad en sitios web. Es compatible con todos los navegadores modernos y se ejecuta del lado del cliente, lo que significa que se ejecuta en el navegador del usuario en lugar de en el servidor web. Esto permite que las páginas web respondan a las acciones del usuario y realicen cambios dinámicos sin necesidad de recargar la página.",
            "text2": "Para comenzar a trabajar con JavaScript, es necesario enlazarlo con HTML. Esto se logra mediante el uso de la etiqueta `<script>`. Puedes incluir la etiqueta `<script>` en el encabezado `<head>` o al final del cuerpo `<body>` de tu documento HTML. Al hacer esto, el navegador cargará y ejecutará el código JavaScript contenido en el archivo enlazado.",
            "text3": "El código JavaScript puede ser escrito directamente dentro de las etiquetas `<script>` o se puede enlazar un archivo externo de JavaScript utilizando el atributo `src`. Por ejemplo, si tienes un archivo llamado `script.js` en el mismo directorio que tu archivo HTML, puedes enlazarlo de la siguiente manera:",
            "sombreado1": "<script src=\"script.js\"></script>",
            "sombreado2": "Recuerda que es recomendable colocar el enlace a JavaScript al final del archivo HTML para asegurarse de que todo el contenido de la página se haya cargado antes de que se ejecute el código JavaScript.",
            "text4": "Ahora, echemos un vistazo rápido a la historia de JavaScript. Fue creado por Brendan Eich en 1995 mientras trabajaba para Netscape Communications. En ese momento, se llamaba LiveScript y tenía como objetivo principal realizar pequeñas tareas dentro del navegador. Posteriormente, se renombró a JavaScript para aprovechar la creciente popularidad de Java. Sin embargo, a diferencia de Java, JavaScript no está relacionado con el lenguaje de programación Java.",
            "text5": "JavaScript ha evolucionado enormemente desde sus inicios y se ha convertido en un lenguaje de programación poderoso y versátil. Además de su uso en desarrollo web, también se utiliza en el desarrollo de aplicaciones móviles, servidores y mucho más. Con el tiempo, se han creado bibliotecas y frameworks populares, como jQuery, AngularJS y React, que facilitan aún más la escritura de código JavaScript.",
            "text6": "En resumen, JavaScript es un lenguaje de programación fundamental para el desarrollo web. En esta lección, hemos aprendido cómo enlazar JavaScript con HTML y hemos explorado un poco de su historia. En las próximas lecciones, nos adentraremos en los conceptos básicos de JavaScript y aprenderemos cómo utilizarlo para crear interactividad en nuestras páginas web."
          },
          "tema2": {
            "titulo": "Variables de JavaScript",
            "header": "Las variables en JavaScript son contenedores para almacenar valores. Cada variable tiene un nombre único y se le asigna un valor específico. En JavaScript, existen varios tipos de variables que se utilizan para diferentes propósitos. Aprender a trabajar con variables es fundamental para programar en JavaScript de manera efectiva.",
            "text1": "1. Variables de tipo String: Estas variables se utilizan para almacenar texto y se definen utilizando comillas simples o dobles. Por ejemplo:",
            "sombreado1": "var nombre = 'Juan';\nvar apellido = \"Pérez\";",
            "text2": "2. Variables de tipo Number: Estas variables se utilizan para almacenar valores numéricos. Pueden ser enteros o números decimales. Por ejemplo:",
            "sombreado2": "var edad = 25;\nvar precio = 19.99;",
            "text3": "3. Variables de tipo Boolean: Estas variables solo pueden tener dos valores: true (verdadero) o false (falso). Se utilizan para representar estados lógicos. Por ejemplo:",
            "sombreado3": "var esMayorDeEdad = true;\nvar tieneDescuento = false;",
            "text4": "4. Variables de tipo Array: Estas variables se utilizan para almacenar múltiples valores en una sola variable. Los elementos dentro de un array se separan por comas y se encierran entre corchetes. Por ejemplo:",
            "sombreado4": "var colores = ['rojo', 'verde', 'azul'];\nvar numeros = [1, 2, 3, 4, 5];",
            "text5": "5. Variables de tipo Object: Estas variables se utilizan para almacenar conjuntos de datos relacionados. Los objetos se definen utilizando llaves y consisten en pares clave-valor. Por ejemplo:",
            "sombreado5": "var persona = {\n  nombre: 'Ana',\n  edad: 30,\n  ciudad: 'Madrid'\n};",
            "text6": "Estos son solo algunos ejemplos de los diferentes tipos de variables en JavaScript. A medida que avances en tu aprendizaje, descubrirás más tipos y formas de utilizar las variables para construir programas más complejos y dinámicos.",
            "sombreado6": ""
          }
        },
        "Modulo2": {
          "titulo": "Funciones y  Consola",
          "tema1": {
            "titulo": "Consola en JavaScript",
            "header": "La consola en JavaScript es una herramienta invaluable para los programadores, ya que nos permite interactuar con el código y ver los resultados de forma instantánea. En este tema, exploraremos las funciones básicas que puedes usar en la consola, así como la forma de imprimir datos y realizar programación básica en este entorno.",
            "video": "https://www.youtube.com/embed/LRyHerlH3bc",
            "text1": "La consola en JavaScript es una interfaz de línea de comandos que nos permite ejecutar código y ver los resultados en tiempo real. Puedes abrir la consola en tu navegador web presionando F12 y luego seleccionando la pestaña 'Consola'. La función console.log() es una de las más utilizadas en la consola. Nos permite imprimir mensajes, valores de variables y resultados de operaciones. Podemos pasarle cualquier tipo de dato como argumento, ya sea texto, números, variables u objetos:",
            "sombreado1": "// Ejemplo de código en la consola\n\n// Imprimir un mensaje en la consola\nconsole.log('Hola, mundo!') //Output: \"Hola, mundo!\";\n\n// Realizar cálculos y mostrar el resultado\nconsole.log(2 + 2) //Output: 4;\n\n// Asignar valores a variables\nvar nombre = 'Juan';\nconsole.log(nombre) //Output: \"Juan\";\n\n// Realizar operaciones con variables\nvar numero1 = 5;\nvar numero2 = 3;\nvar resultado = numero1 * numero2;\nconsole.log(resultado) //Output: 15;",
            "text2": "Además de console.log(), existen otras funciones útiles en la consola de JavaScript. Algunas de ellas son:",
            "sombreado2": "// Mostrar un mensaje de advertencia\nconsole.warn('¡Cuidado! Este es un mensaje de advertencia.');\n\n// Mostrar un mensaje de error\nconsole.error('¡Error! Algo salió mal.');\n\n// Limpiar la consola\nconsole.clear();\n\n// Medir el tiempo de ejecución de un bloque de código\nconsole.time('Tiempo de ejecución');\n// Bloque de código a medir\nconsole.timeEnd('Tiempo de ejecución');",
            "text3": "Estas funciones nos permiten mostrar mensajes de advertencia, errores, limpiar la consola y medir el tiempo de ejecución de nuestro código. Son útiles para depurar y mejorar el rendimiento de nuestras aplicaciones.",
            "text4": "Recuerda que la consola en JavaScript es una herramienta poderosa que te ayudará a comprender y depurar tu código. Experimenta con ella, prueba diferentes funciones y familiarízate con su uso. ¡Diviértete programando en la consola de JavaScript!"
          },
          "tema2": {
            "titulo": "Funciones en JavaScript",
            "header": "Las funciones son bloques de código reutilizables que realizan tareas específicas en JavaScript. Son una parte fundamental de cualquier programa y permiten organizar y modularizar el código. En este tema, exploraremos las funciones en JavaScript, tanto aquellas que reciben parámetros como las que no. Aprenderemos cómo definir y llamar funciones, así como algunos consejos útiles para utilizarlas de manera efectiva en nuestros programas.",
            "video": "https://www.youtube.com/embed/-cyjuQJjOfg",
            "text1": "Una función en JavaScript es un bloque de código que realiza una tarea específica. Puede tomar cero o más parámetros (valores de entrada) y puede devolver un resultado. La sintaxis básica para definir una función es la siguiente:",
            "sombreado1": "function nombreDeLaFuncion(parametro1, parametro2) {\n // Cuerpo de la función\n // Código a ejecutar\n}",
            "text2": "Para llamar a una función, simplemente escribimos su nombre seguido de paréntesis. Si la función tiene parámetros, proporcionamos los valores de entrada entre paréntesis. Aquí hay un ejemplo:",
            "sombreado2": "function saludar(nombre) {\n console.log('¡Hola, ' + nombre + '!');\n}\n\nsaludar('Juan'); // Output: ¡Hola, Juan!",
            "text3": "En el ejemplo anterior, hemos definido una función llamada 'saludar' que toma un parámetro 'nombre'. Dentro de la función, imprimimos un saludo personalizado utilizando el valor del parámetro. Luego, llamamos a la función y pasamos el argumento 'Juan' para que se imprima el saludo correspondiente.",
            "text4": "Las funciones también pueden devolver un resultado utilizando la palabra clave 'return'. Esto es útil cuando queremos que la función realice algún cálculo y nos devuelva el resultado. Por ejemplo:",
            "sombreado3": "function sumar(a, b) {\n return a + b;\n}\n\nvar resultado = sumar(2, 3);\nconsole.log(resultado); // Output: 5",
            "text5": "En este caso, la función 'sumar' toma dos parámetros, 'a' y 'b', y devuelve la suma de ambos utilizando la declaración 'return'. Luego, almacenamos el resultado en la variable 'resultado' y lo imprimimos en la consola.",
            "text6": "Cuando una función no tiene parámetros, podemos llamarla simplemente escribiendo su nombre seguido de paréntesis. Por ejemplo:",
            "sombreado4": "function saludar() {\n console.log('¡Hola, mundo!');\n}\n\nsaludar(); // Output: ¡Hola, mundo!",
            "text7": "En este caso, la función 'saludar' no requiere ningún parámetro, por lo que simplemente la llamamos escribiendo 'saludar()'. El código dentro de la función se ejecutará y mostrará el mensaje '¡Hola, mundo!' en la consola.",
            "text8": "Al utilizar funciones en nuestros programas, es importante seguir algunas buenas prácticas:",
            "text9": "1. Nombra tus funciones de manera descriptiva para que sea claro qué hacen. Por ejemplo, en lugar de nombrar una función 'f', podrías llamarla 'calcularPromedio'.",
            "text10": "2. Utiliza comentarios para explicar el propósito y el funcionamiento de la función. Esto ayudará a otros programadores (y a ti mismo) a entender el código más fácilmente.",
            "text11": "3. Reutiliza funciones siempre que sea posible. En lugar de repetir bloques de código idénticos, encapsúlalos en una función y llámala en diferentes partes de tu programa.",
            "text12": "4. Evita la duplicación de código. Si encuentras que estás escribiendo la misma secuencia de instrucciones en varios lugares, considera crear una función para evitar la repetición.",
            "text13": "Las funciones son una herramienta poderosa en JavaScript que nos permiten escribir código modular y reutilizable. Con práctica y experiencia, podrás utilizar las funciones de manera efectiva para crear programas más eficientes y fáciles de mantener.",
            "text14": "¡Ahora es tu turno! Prueba a definir tus propias funciones y experimenta con diferentes parámetros y resultados. ¡Diviértete programando con funciones en JavaScript!"
          }
        }
      }
    }
  }
]
